import { writeFileSync, mkdirSync } from "fs";
import { resolve } from "path";

// Lis les variables telles que définies sur Vercel.
// Le script accepte tes noms FR OU les noms EN standard.
const JOB_POSTING_URL =
  process.env.JOB_POSTING_URL || process.env.JOB_POSTING_URL;
const EMAILJS_TEMPLATE_ID =
  process.env.EMAILJS_TEMPLATE_ID || process.env.ID_TEMPLATE_EMAILJS;

const EMAILJS_SERVICE_ID = process.env.EMAILJS_SERVICE_ID;
const EMAILJS_PUBLIC_KEY = process.env.EMAILJS_PUBLIC_KEY;
const API_TOKEN = process.env.API_TOKEN;

const required = {
  JOB_POSTING_URL,
  EMAILJS_SERVICE_ID,
  EMAILJS_TEMPLATE_ID,
  EMAILJS_PUBLIC_KEY,
  API_TOKEN,
};

const missing = Object.entries(required)
  .filter(([, v]) => !v)
  .map(([k]) => k);

if (missing.length) {
  console.error(`❌ Missing env vars: ${missing.join(", ")}`);
  process.exit(1);
}

const content = (production) => `// AUTO-GENERATED by tools/generate-env.mjs
export const environment = {
  production: ${production},
  jobPostingUrl: ${JSON.stringify(JOB_POSTING_URL)},
  emailjsServiceId: ${JSON.stringify(EMAILJS_SERVICE_ID)},
  emailjsTemplateId: ${JSON.stringify(EMAILJS_TEMPLATE_ID)},
  emailjsPublicKey: ${JSON.stringify(EMAILJS_PUBLIC_KEY)},
  apiToken: ${JSON.stringify(API_TOKEN)},
};
`;

const outDir = resolve("src/environnement");
mkdirSync(outDir, { recursive: true });

writeFileSync(resolve(outDir, "environnement.ts"), content(false), "utf-8");
writeFileSync(resolve(outDir, "environnement.prod.ts"), content(true), "utf-8");

console.log("✅ Généré: src/environnement/environnement.ts & environnement.prod.ts");
